// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String? @unique
  username        String? @unique  
  bio             String?
  location        String?
  site            String?
  emailVerified   DateTime?
  image           String?
  profileImage    String?
  coverImage      String?
  hashedPassword  String?
  birthDate       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  followingIds    String[] @db.ObjectId
  hasNotification Boolean?
  infoProvided Boolean?

  posts         Post[]
  notifications Notification[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String  @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  image String
  username String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedIds String[] @db.ObjectId
  comments Comment[]

  user User @relation(fields: [username], references: [username], onDelete:Cascade)
}

model Comment{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  username String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId String @db.ObjectId

  post Post @relation(fields: [postId], references: [id], onDelete:Cascade)
}

model Notification{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
} 
